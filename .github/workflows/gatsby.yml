name: Check Progress and Update Issues

on:
  schedule:
    - cron: '0 9 * * *'  # Runs daily at 9:00 AM UTC
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-progress:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: pip install PyGithub

      # Step 4: Run Progress Check Script
      - name: Run Progress Check
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          python -c """
          from github import Github
          from datetime import datetime

          # Load environment variables
          import os
          token = os.getenv('PAT')
          if not token:
              raise ValueError("Personal Access Token (PAT) is not set.")

          repo_name = "mighty070jail/30-Days-Of-Python"
          team_members = ["Leslythomasmathew", "irenejimmy", "levinabr", "Lulup-pradeepan", "mighty070jail"]

          # Determine the current day and week
          today = datetime.now()
          day_number = (today.timetuple().tm_yday - 1) % 30 + 1  # Adjust to align with Day-1
          week_number = (day_number - 1) // 7 + 1
          day_name = f"Day-{day_number}"
          week_name = f"Week-{week_number}"

          # Authenticate with GitHub
          g = Github(token)
          repo = g.get_repo(repo_name)
          missing_files = []
          completed_members = []

          # Check for team members' files
          for member in team_members:
              file_path = f"{week_name}/{day_name}/{member}.py"
              try:
                  repo.get_contents(file_path)
                  completed_members.append(member)
              except:
                  missing_files.append(member)

          # Prepare issue content
          issue_title = f"Progress Update: {day_name}"
          body = f"**Day:** {day_name}\\n**Week:** {week_name}\\n\\n" \
                 f"**Completed:**\\n- " + "\\n- ".join(completed_members) + "\\n\\n" \
                 f"**Pending:**\\n- " + "\\n- ".join(missing_files)

          # Update or create the issue
          issues = repo.get_issues(state="open")
          issue = next((i for i in issues if i.title == issue_title), None)
          if issue:
              issue.edit(body=body)
          else:
              repo.create_issue(title=issue_title, body=body)
          """
